@inherits LayoutComponentBase
@inject IJSRuntime JS

<div class="sidebar" id="sidebar">
    <button class="toggle-btn" @onclick="ToggleSidebar">☰</button>
    <div class="menu-title-vertical" id="vertical-title">Gantt samples</div>
    <div class="menu-content">
        <div class="menu-item">
            <div class="menu-title" @onclick='() => ToggleMenu("menu1", "arrow1")'>
                Initialization <span id="arrow1">↓</span>
            </div>
            <div class="submenu" id="menu1">
                <a href="01_initialization/01_basic_init">Basic initialization</a>
                <a href="#">子菜单 1.2</a>
            </div>
        </div>
        <div class="menu-item">
            <div class="menu-title" @onclick='() => ToggleMenu("menu2", "arrow2")'>
                菜单项 2 <span id="arrow2">↓</span>
            </div>
            <div class="submenu" id="menu2">
                <a href="#">子菜单 2.1</a>
                <a href="#">子菜单 2.2</a>
            </div>
        </div>
        <div class="menu-item">
            <div class="menu-title" @onclick='() => ToggleMenu("menu3", "arrow3")'>
                菜单项 3 <span id="arrow3">↓</span>
            </div>
            <div class="submenu" id="menu3">
                <a href="#">子菜单 3.1</a>
                <a href="#">子菜单 3.2</a>
            </div>
        </div>
    </div>
</div>

<style>
    .sidebar {
        width: 250px;
        background-color: #f8f9fa;
        padding: 10px;
        border-right: 1px solid #ddd;
        transition: width 0.3s;
        display: flex;
        flex-direction: column;
    }

        .sidebar.collapsed {
            width: 50px;
        }

    .toggle-btn {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        margin-bottom: 10px;
    }

    .menu-title-vertical {
        display: none;
        writing-mode: vertical-rl;
        transform: rotate(180deg);
        text-align: center;
        margin-top: 20px;
        font-weight: bold;
    }

    .sidebar.collapsed .menu-title-vertical {
        display: block;
    }

    .menu-content {
        flex-grow: 1;
        overflow-y: auto;
    }

    .menu-item {
        margin-bottom: 10px;
    }

    .menu-title {
        font-weight: bold;
        cursor: pointer;
    }

    .sidebar.collapsed .menu-title,
    .sidebar.collapsed .submenu {
        display: none;
    }

    .submenu {
        display: none;
        padding-left: 20px;
    }

        .submenu a {
            display: block;
            margin: 5px 0;
            text-decoration: none;
            color: #007bff;
        }

            .submenu a:hover {
                text-decoration: underline;
            }
</style>

@code {
    private Dictionary<string, bool> menuStates = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {
        var menuStatesJson = await JS.InvokeAsync<string>("localStorage.getItem", "menuStates");
        if (!string.IsNullOrEmpty(menuStatesJson))
        {
            menuStates = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, bool>>(menuStatesJson);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        foreach (var menuState in menuStates)
        {
            var menuId = menuState.Key;
            var isExpanded = menuState.Value;
            if (isExpanded)
            {
                await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId}').style.display = 'block';");
                await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId.Replace("menu", "arrow")}').textContent = '↑';");
            }
            else
            {
                await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId}').style.display = 'none';");
                await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId.Replace("menu", "arrow")}').textContent = '↓';");
            }
        }
    }

    private async Task ToggleMenu(string menuId, string arrowId)
    {
        var display = await JS.InvokeAsync<string>("eval", $"document.getElementById('{menuId}').style.display");
        if (display == "none" || string.IsNullOrEmpty(display))
        {
            await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId}').style.display = 'block';");
            await JS.InvokeVoidAsync("eval", $"document.getElementById('{arrowId}').textContent = '↑';");
            menuStates[menuId] = true;
        }
        else
        {
            await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId}').style.display = 'none';");
            await JS.InvokeVoidAsync("eval", $"document.getElementById('{arrowId}').textContent = '↓';");
            menuStates[menuId] = false;
        }
        await JS.InvokeVoidAsync("localStorage.setItem", "menuStates", System.Text.Json.JsonSerializer.Serialize(menuStates));
    }

    private async Task ToggleSidebar()
    {
        await JS.InvokeVoidAsync("eval", "document.getElementById('sidebar').classList.toggle('collapsed');");

        var isCollapsed = await JS.InvokeAsync<bool>("eval", "document.getElementById('sidebar').classList.contains('collapsed')");
        if (isCollapsed)
        {
            await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.submenu').forEach(submenu => submenu.style.display = 'none');");
            await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.menu-title span').forEach(arrow => arrow.textContent = '↓');");
        }
        else
        {
            foreach (var menuState in menuStates)
            {
                var menuId = menuState.Key;
                var isExpanded = menuState.Value;
                if (isExpanded)
                {
                    await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId}').style.display = 'block';");
                    await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId.Replace("menu", "arrow")}').textContent = '↑';");
                }
                else
                {
                    await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId}').style.display = 'none';");
                    await JS.InvokeVoidAsync("eval", $"document.getElementById('{menuId.Replace("menu", "arrow")}').textContent = '↓';");
                }
            }
        }
    }
}

