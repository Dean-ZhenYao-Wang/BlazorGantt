@implements IDisposable
@inject IJSRuntime JS
<div id="@id" @ref="element" class="initgantt" @attributes=AdditionalAttributes></div>

@code {
    public ElementReference element;
    public IJSObjectReference js_gantt;
    private DotNetObjectReference<Gantt>? dotNetRef;
    protected override void OnInitialized()
    {
        dotNetRef = DotNetObjectReference.Create(this);
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public string id { get; set; } = Guid.NewGuid().ToString().Replace("-", "");
    [Parameter]
    public EventCallback firstRender{ get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.js_gantt = await JS.InvokeAsync<IJSObjectReference>("BlazorGantt.getGanttInstance", this.dotNetRef, this.id);

            await this.firstRender.InvokeAsync();
        }
    }
    public async Task Plugins(GanttPlugins plugins)
    {
        await JS.InvokeVoidAsync("BlazorGantt.plugins", this.js_gantt, plugins);
    }
    public async Task init()
    {
        await JS.InvokeVoidAsync("BlazorGantt.init", this.js_gantt, this.element);
    }
    public async Task init(ElementReference element)
    {
        await JS.InvokeVoidAsync("BlazorGantt.init", this.js_gantt, element);
    }
    public async Task init(DateTime startDate,DateTime endDate)
    {
        await JS.InvokeVoidAsync("BlazorGantt.init3", this.js_gantt, this.element,startDate,endDate);
    }
    public async Task parse(object tasks)
    {
        await JS.InvokeVoidAsync("BlazorGantt.parse", this.js_gantt, tasks);
    }
    public async Task set_Config(object config)
    {
        await JS.InvokeVoidAsync("BlazorGantt.set_config", this.js_gantt, config);
    }
    public async Task<IJSObjectReference> get_Config()
    {
        return await JS.InvokeAsync<IJSObjectReference>("BlazorGantt.get_config", this.js_gantt);
    }
    public async Task<T> get_Property<T>(string propertyName)
    {
        return await JS.InvokeAsync<T>("BlazorGantt.get_property", this.js_gantt, propertyName);
    }
    public async Task set_property(string propertyName,object value)
    {
        await JS.InvokeVoidAsync("BlazorGantt.set_property", this.js_gantt, propertyName, value);
    }

    public async Task attachEvent(string name, string funcStr)
    {
        await JS.InvokeVoidAsync("BlazorGantt.attachEvent", this.js_gantt,name, funcStr);
    }
    [JSInvokable]
    public static void netAttachEvent(params object[] args)
    {
        Console.WriteLine("netAttachEvent");
    }

    public async Task load(string url)
    {
        await JS.InvokeVoidAsync("BlazorGantt.load1", this.js_gantt, url);
    }
    public async Task load(string url, string loadType)
    {
        await JS.InvokeVoidAsync("BlazorGantt.load2", this.js_gantt, url, loadType);
    }
    public async Task message(MessageObject messageObj)
    {
        await JS.InvokeVoidAsync("BlazorGantt.messageObj", this.js_gantt, messageObj);
    }
    public async Task message(string message)
    {
        await JS.InvokeVoidAsync("BlazorGantt.message", this.js_gantt, message);
    }
    public async Task<IJSObjectReference> CreateDataProcessor(string url, string mode)
    {
        return await JS.InvokeAsync<IJSObjectReference>("BlazorGantt.createDataProcessor", this.js_gantt, url, mode);
    }
    public async Task setSkin(string skin)
    {
        await JS.InvokeVoidAsync("BlazorGantt.setSkin", this.js_gantt, skin);
    }
    public async Task render()
    {
        await JS.InvokeVoidAsync("BlazorGantt.render", this.js_gantt);
    }
    public async Task<Task_Link> getLink(string id)
    {
        return await JS.InvokeAsync<Task_Link>("BlazorGantt.getLink", this.js_gantt, id);
    }
    public async Task<Task_Data> getTask(string id)
    {
        return await JS.InvokeAsync<Task_Data>("BlazorGantt.getTask", this.js_gantt, id);
    }
    public async Task i18n_setLocale(object lang)
    {
        await JS.InvokeVoidAsync("BlazorGantt.i18n_setLocale", this.js_gantt, lang);
    }
    public async Task templates_rightside_text(string funcStr)
    {
        await JS.InvokeVoidAsync("BlazorGantt.templates_rightside_text", this.js_gantt, funcStr);
    }
    public async Task templates_scale_cell_class(string funcStr)
    {
        await JS.InvokeVoidAsync("BlazorGantt.templates_scale_cell_class", this.js_gantt, funcStr);
    }
    public async Task templates_timeline_cell_class(string funcStr)
    {
        await JS.InvokeVoidAsync("BlazorGantt.templates_timeline_cell_class", this.js_gantt, funcStr);
    }
    public async Task templates_date_grid(string funcStr)
    {
        await JS.InvokeVoidAsync("BlazorGantt.templates_date_grid", this.js_gantt, funcStr);
    }
    public async Task templates_grid_date_format(string date)
    {
        await JS.InvokeVoidAsync("BlazorGantt.templates_grid_date_format", this.js_gantt, date);
    }

    void IDisposable.Dispose()
    {
        if (js_gantt is not null)
        {
            JS.InvokeVoidAsync("BlazorGantt.destructor", js_gantt, element, id);
        }
    }
}
